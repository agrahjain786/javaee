package com.techlabs.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import com.techlabs.entity.Account;
import com.techlabs.entity.Customer;
import com.techlabs.entity.Transaction;

public class BankDAO {
	
	private DataSource dataSource;

	public BankDAO(DataSource dataSource) {
		super();
		this.dataSource = dataSource;
	}
	
	public Customer validateCustomer(String email, String password) {
		
		Customer customer = null;
		try {
			Connection connection = dataSource.getConnection();
			
			String sql = "select * from customers where email = ? and password = ?";
			
			PreparedStatement stmt = connection.prepareStatement(sql);
			
			stmt.setString(1, email);
            stmt.setString(2, password);
			
            ResultSet rs = stmt.executeQuery();
            
            while(rs.next()) {
				int id = rs.getInt("id");
				String firstName = rs.getString("first_name");
				String lastName = rs.getString("last_name");
				
				
				customer = new Customer(id, firstName, lastName, email, password);
				
			}
		} 
		catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return customer;
		
	}

	
	public boolean addCustomer(Customer customer) {
		// TODO Auto-generated method stub
		try {
			Connection connection = dataSource.getConnection();
			
			String query = "insert into customers(first_name, last_name, email, password) values (?, ?, ?, ?);";
			
			PreparedStatement stmt = connection.prepareStatement(query);
			
			stmt.setString(1, customer.getFirstName());
			stmt.setString(2, customer.getLastName());
			stmt.setString(3, customer.getEmail());
			stmt.setString(4, customer.getPassword());
			
			int res = stmt.executeUpdate();
			
			if(res == 0) return false;
			return true;
			
		} 
		catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return false;
	}
	
	public List<Customer> viewCustomer(){
		
		List<Customer> customers = new ArrayList<Customer>();
		
		try {
			Connection connection = dataSource.getConnection();
			
			Statement stmt = connection.createStatement();
			
			String query = "select * from customers;";
			
			ResultSet rs = stmt.executeQuery(query);
			
			while(rs.next()) {
				int id = rs.getInt("id");
				String firstName = rs.getString("first_name");
				String lastName = rs.getString("last_name");
				String email = rs.getString("email");
				String password = rs.getString("password");
				
				
				Customer customer = new Customer(id, firstName, lastName, email, password);
				
				customers.add(customer);
				
			}
		} 
		catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return customers;
	}
	
	
	public List<Transaction> viewTransaction(){
		
		List<Transaction> transactions = new ArrayList<Transaction>();
		
		try {
			Connection connection = dataSource.getConnection();
			
			Statement stmt = connection.createStatement();
			
			String query = "select * from transaction;";
			
			ResultSet rs = stmt.executeQuery(query);
			
			while(rs.next()) {
				int id = rs.getInt("id");
			    int senderAccountNumber = rs.getInt("sender_account_number");
			    int receiverAccountNumber = rs.getInt("receiver_account_number");
			    String type = rs.getString("type");
			    double amount = rs.getDouble("amount");
			    Timestamp date = rs.getTimestamp("date");
				
				
				Transaction transaction = new Transaction(id, senderAccountNumber, receiverAccountNumber, type, amount, date);
				
				transactions.add(transaction);
				
			}
		} 
		catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return transactions;
	}
	
	
	public Customer getCustomerById(int customerId) {
		
        Customer customer = null;
        
        try {
        	Connection connection = dataSource.getConnection();
        	
            String query = "select * from customers where id = ?;";
            
            PreparedStatement pstmt = connection.prepareStatement(query);
            
            pstmt.setInt(1, customerId);
            
            ResultSet rs = pstmt.executeQuery();
            
            if (rs.next()) {
            	int id = rs.getInt("id");
				String firstName = rs.getString("first_name");
				String lastName = rs.getString("last_name");
				String email = rs.getString("email");
				String password = rs.getString("password");
				
				
				customer = new Customer(id, firstName, lastName, email, password);
            }
        } 
        catch (SQLException e) {
            e.printStackTrace();
        }
        return customer;
    }
	
	
	public boolean createAccount(Account account) {
		
		try {
        	 Connection connection = dataSource.getConnection();
        	
        	 String sql = "insert into accounts (customer_id, balance) VALUES (?, ?)";

        	 PreparedStatement stmt = connection.prepareStatement(sql);
        	 
        	 stmt.setInt(1, account.getCustomerId());
             stmt.setDouble(2, account.getBalance());
             
             int res = stmt.executeUpdate();
 			
 			 if(res == 0) return false;
 			 return true;
		}
		catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return false;
	}

	

	public List<Transaction> viewCustomerTransaction(Customer customer) {
		
		List<Transaction> customerTransactions = new ArrayList<Transaction>();
		
		try {
			Connection connection = dataSource.getConnection();
			
			String query = "select * from transaction where id = ?;";
			
			PreparedStatement stmt = connection.prepareStatement(query);
			
			stmt.setInt(1, customer.getId());
			
			ResultSet rs = stmt.executeQuery(query);
			
			while(rs.next()) {
				int id = rs.getInt("id");
			    int senderAccountNumber = rs.getInt("sender_account_number");
			    int receiverAccountNumber = rs.getInt("receiver_account_number");
			    String type = rs.getString("type");
			    double amount = rs.getDouble("amount");
			    Timestamp date = rs.getTimestamp("date");
				
				Transaction transaction = new Transaction(id, senderAccountNumber, receiverAccountNumber, type, amount, date);
				
				customerTransactions.add(transaction);
				
			}
		} 
		catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return customerTransactions;
		
		
	}
	
	public boolean updateCustomerProfile(Customer customer) {
		// TODO Auto-generated method stub
		try {
			Connection connection = dataSource.getConnection();
			
			String query = "update customers set first_name=?, last_name=?, password=? where id=?";
			
			PreparedStatement stmt = connection.prepareStatement(query);
			
			stmt.setString(1, customer.getFirstName());
			stmt.setString(2, customer.getLastName());
			stmt.setString(3, customer.getPassword());
			stmt.setInt(4, customer.getId());
			
			int res = stmt.executeUpdate();
			
			if(res == 0) return false;
			return true;
			
		} 
		catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return false;
	}

	public boolean newTransaction(Transaction transaction) {
		
		try {
			Connection connection = dataSource.getConnection();
			 
			String query = "insert into transactions (sender_account_number, receiver_account_number, type, amount) values (?, ?, ?, ?)";
            
			PreparedStatement stmt = connection.prepareStatement(query);
            
			stmt.setInt(1, transaction.getSenderAccountNumber());
			stmt.setInt(2, transaction.getReceiverAccountNumber());
			stmt.setString(3, transaction.getType());
			stmt.setDouble(4, transaction.getAmount());
			int res = stmt.executeUpdate();
			 
			if(res == 0) return false;
			return true;
	    } 
		catch (SQLException e) {
	           e.printStackTrace();
	    }
		
		return false;
	}

	

}
